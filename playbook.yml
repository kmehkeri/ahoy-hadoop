---
- hosts: all
  become: yes

  handlers:
    - name: Restart Network Manager
      service: name=NetworkManager state=restarted

    - name: Restart network
      service: name=network state=restarted

  tasks:
    - name: Copy hosts file
      copy: src=hosts dest=/etc/hosts
      notify:
        - Restart Network Manager
        - Restart network

    - name: Add Cloudera repository
      yum_repository:
        name: cloudera-cdh5
        description: Cloudera's Distribution for Hadoop, Version 5
        baseurl: https://archive.cloudera.com/cdh5/redhat/7/x86_64/cdh/5/
        gpgkey: https://archive.cloudera.com/cdh5/redhat/7/x86_64/cdh/RPM-GPG-KEY-cloudera
        gpgcheck: yes

    - name: Install Packages
      yum: name={{item}} state=present
      with_items:
        - vim
        - java
        - zookeeper
        - hadoop-client

    - name: Configure variables for Java
      copy: src=java.sh dest=/etc/profile.d

    - name: Configure Hadoop
      copy: src=hadoop/ dest=/etc/hadoop/conf

    - name: Prepare data directory
      file: path=/data state=directory

    - name: Manage .bashrc
      blockinfile:
        dest: ~/.bashrc
        block: |
          PS1='\[\e[0;36m\][\A] \[\e[1;31m\]\u@\h \[\e[1;34m\]\w \$ \[\e[0m\]'


- hosts: postgresql_servers
  become: yes

  tasks:
    - name: Install PostgreSQL
      yum: name={{item}} state=present
      with_items:
        - postgresql-server
        - postgresql-libs
        - python-psycopg2

    - name: Initialize PostgreSQL
      command: postgresql-setup initdb  creates=/var/lib/pgsql/data/pg_hba.conf

    - name: Configure PostgreSQL
      copy: src=postgresql/ dest=/var/lib/pgsql/data

    - name: Start PostgreSQL server
      service: name=postgresql enabled=yes state=started


- hosts: zookeepers
  become: yes
  
  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
       - zookeeper-server

    - name: Configure Zookeeper
      copy: src=zookeeper/zoo.cfg dest=/etc/zookeeper/conf

    - name: Create Zookeeper data directory
      file: path=/data/zookeeper state=directory owner=zookeeper group=zookeeper mode=0700

    - name: Create Zookeeper id
      shell: service zookeeper-server init --myid=$(echo -n $(hostname) | tail -c 1)  creates=/data/zookeeper/myid

    - name: Start Zookeeper
      service: name=zookeeper-server enabled=yes state=started


- hosts: hdfs_namenodes
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-hdfs-namenode

    - name: Prepare namenode directory
      file: path=/data/namenode state=directory owner=hdfs group=hdfs

    - name: Format HDFS
      shell: hdfs namenode -format  creates=/data/namenode/current
      become: yes
      become_user: hdfs

    - name: Start Namenode
      service: name=hadoop-hdfs-namenode enabled=yes state=started

    - name: Create /tmp directory in HDFS
      command: hdfs dfs -mkdir /tmp
      become: yes
      become_user: hdfs
      register: create_tmp
      failed_when: "create_tmp.rc != 0 and 'File exists' not in create_tmp.stderr"
      changed_when: "create_tmp.rc == 0 and 'File exists' not in create_tmp.stderr"

    - name: Set permissions on /tmp
      command: hdfs dfs -chmod 1777 /tmp
      become: yes
      become_user: hdfs
      when: create_tmp.changed

    - name: Create /user directory in HDFS
      command: hdfs dfs -mkdir /user
      become: yes
      become_user: hdfs
      register: create_user
      failed_when: "create_user.rc != 0 and 'File exists' not in create_user.stderr"
      changed_when: "create_user.rc == 0 and 'File exists' not in create_user.stderr"


- hosts: hdfs_secondary_namenodes
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-hdfs-secondarynamenode

    - name: Prepare namenode directory
      file: path=/data/secondarynamenode state=directory owner=hdfs group=hdfs mode=0700

    - name: Start Secondary Namenode
      service: name=hadoop-hdfs-secondarynamenode enabled=yes state=started


- hosts: hdfs_datanodes
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-hdfs-datanode

    - name: Prepare datanode directory
      file: path=/data/datanode state=directory owner=hdfs group=hdfs mode=0700

    - name: Start Datanode
      service: name=hadoop-hdfs-datanode enabled=yes state=started


- hosts: yarn_resource_managers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-yarn-resourcemanager

    - name: Start Resource Manager
      service: name=hadoop-yarn-resourcemanager enabled=yes state=started


- hosts: yarn_node_managers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-yarn-nodemanager
        - hadoop-mapreduce

    - name: Start Node Manager
      service: name=hadoop-yarn-nodemanager enabled=yes state=started


- hosts: mapred_job_history_servers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hadoop-mapreduce-historyserver

    - name: Start Job History Server
      service: name=hadoop-mapreduce-historyserver enabled=yes state=started


- hosts: hbase_masters
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hbase-master

    - name: Configure HBase
      copy: src=hbase/ dest=/etc/hbase/conf

    - name: Create /hbase directory in HDFS
      command: hdfs dfs -mkdir /hbase
      become: yes
      become_user: hdfs
      register: create_hbase_dir
      failed_when: "create_hbase_dir.rc != 0 and 'File exists' not in create_hbase_dir.stderr"
      changed_when: "create_hbase_dir.rc == 0 and 'File exists' not in create_hbase_dir.stderr"

    - name: Set owner for /hbase
      command: hdfs dfs -chown hbase /hbase
      become: yes
      become_user: hdfs
      when: create_hbase_dir.changed

    - name: Start HBase Master
      service: name=hbase-master enabled=yes state=started


- hosts: hbase_thrift_servers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hbase-thrift

    - name: Start HBase Thrift
      service: name=hbase-thrift enabled=yes state=started


- hosts: hbase_regionservers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hbase-regionserver

    - name: Configure HBase
      copy: src=hbase/ dest=/etc/hbase/conf

    - name: Start HBase Regionserver
      service: name=hbase-regionserver enabled=yes state=started


- hosts: hive_servers
  become: yes

  tasks:
    - name: Create PostgreSQL user for Hive
      postgresql_user: name=hive password=vagrant
      become_user: postgres
    
    - name: Create PostgreSQL database for Hive Metastore
      postgresql_db: name=metastore encoding=UTF-8 owner=hive
      become_user: postgres

    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hive
        - hive-server2
        - hive-metastore
        - hive-hbase
        - postgresql-jdbc

    - name: Create symbolic link for postgresql-jdbc
      file: name=/usr/lib/hive/lib/postgresql-jdbc.jar state=link src=/usr/share/java/postgresql-jdbc.jar

    - name: Check Metastore schema
      shell: PGPASSWORD=vagrant psql -h 127.0.0.1 -U hive -d metastore -c "\d" -t
      register: metastore_schema_check
      changed_when: 'false'

    - name: Create Metastore schema
      shell: PGPASSWORD=vagrant psql -h 127.0.0.1 -U hive -d metastore -c "\i /usr/lib/hive/scripts/metastore/upgrade/postgres/hive-schema-$(ls /usr/lib/hive/scripts/metastore/upgrade/postgres/hive-schema* | sed 's/.*hive-schema-\(.*\).postgres.sql/\1/' | sort -n -t'.' -k1 -k2 -k3 | tail -1).postgres.sql"
      when: "'VERSION' not in metastore_schema_check.stdout"
      register: metastore_schema
      failed_when: "metastore_schema.rc != 0 or 'ERROR' in metastore_schema.stderr"

    - name: Configure Hive
      copy: src=hive/ dest=/etc/hive/conf

    - name: Start Hive Metastore
      service: name=hive-metastore enabled=yes state=started

    - name: Create /user/hive directory in HDFS
      command: hdfs dfs -mkdir /user/hive
      become: yes
      become_user: hdfs
      register: hdfs_create_hive
      failed_when: "hdfs_create_hive.rc != 0 and 'File exists' not in hdfs_create_hive.stderr"
      changed_when: "hdfs_create_hive.rc == 0 and 'File exists' not in hdfs_create_hive.stderr"

    - name: Set owner for /user/hive
      command: hdfs dfs -chown hive /user/hive
      become: yes
      become_user: hdfs
      when: hdfs_create_hive.changed

    - name: Create /user/hive/warehouse directory in HDFS
      command: hdfs dfs -mkdir /user/hive/warehouse
      become: yes
      become_user: hdfs
      register: hdfs_create_warehouse
      failed_when: "hdfs_create_warehouse.rc != 0 and 'File exists' not in hdfs_create_warehouse.stderr"
      changed_when: "hdfs_create_warehouse.rc == 0 and 'File exists' not in hdfs_create_warehouse.stderr"

    - name: Set owner for /user/hive/warehouse
      command: hdfs dfs -chown hive /user/hive/warehouse
      become: yes
      become_user: hdfs
      when: hdfs_create_warehouse.changed

    - name: Start Hive Server
      service: name=hive-server2 enabled=yes state=started


- hosts: hue_servers
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - hue

    - name: Configure Hue
      copy: src=hue/ dest=/etc/hue/conf

    - name: Create PostgreSQL user for Hue
      postgresql_user: name=hue password=vagrant
      become_user: postgres

    - name: Create PostgreSQL database for Hue
      postgresql_db: name=hue encoding=UTF-8 owner=hue
      become_user: postgres

    - name: Check PostgreSQL Hue schema
      shell: PGPASSWORD=vagrant psql -h 127.0.0.1 -U hue -d hue -c "\d" -t
      register: hue_schema_check
      changed_when: 'false'

    - name: Create PostgreSQL Hue schema
      shell: /usr/lib/hue/build/env/bin/hue syncdb --noinput && /usr/lib/hue/build/env/bin/hue migrate
      when: "'django_site' not in hue_schema_check.stdout"

    - name: Fix Hue rc script
      lineinfile: "dest=/etc/init.d/hue regexp='^# pidfile:' line='# pidfile: /var/run/hue/supervisor.pid'"
      register: fix_hue_rc_script

    - name: systemctl daemon-reload
      command: systemctl daemon-reload
      when: fix_hue_rc_script.changed

    - name: Start Hue
      service: name=hue enabled=yes state=started
      ignore_errors: true


- hosts: spark_clients
  become: yes

  tasks:
    - name: Install packages
      yum: name={{item}} state=present
      with_items:
        - spark-core
        - spark-python


- hosts: all

  tasks:
    - name: Have vagrant in hadoop group
      user: name=vagrant groups=hadoop append=yes
      become: yes

    - name: Manage .bashrc
      blockinfile:
        dest: ~/.bashrc
        block: |
          PS1='\[\e[0;36m\][\A] \[\e[1;35m\]\u@\h \[\e[1;34m\]\w \$ \[\e[0m\]'

